/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import com.biosec.ams.core.CardOperations;
import com.biosec.ams.core.ReturnMessage;
import com.biosec.ams.core.WebServiceCommunicator;
import com.biosec.icams.RetrievePINResponse;
import com.c10n.scalibur.ChannelException;
import com.c10n.scalibur.bio.Scanner;
import com.c10n.scalibur.ngeid.card.NGeIDCard;
import com.c10n.scalibur.ngeid.profile.NGeIDProfile;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.Font;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Arrays;
import javax.persistence.EntityManager;
import javax.smartcardio.Card;
import javax.smartcardio.CardTerminal;
import javax.swing.AbstractButton;
import javax.swing.BoxLayout;
import javax.swing.ButtonGroup;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;
import utilities.UtilityOperations;

/**
 *
 * @author INIONGUN ISAAC I
 */
public class ResetUserEPKIPinWithMOCPanel extends javax.swing.JPanel {

    NGeIDProfile ngEIDProfile;
    CardTerminal cardTerminal;
    Scanner scanner;
    Card card;

    int fingerValue;

    ButtonGroup btnGrp;

    UtilityOperations utilOps;
    WebServiceCommunicator webServiceCommunicator;
    private EntityManager entityManager;

    AncestorEvent ancestorEvent;
    public ResetUserEPKIPinWithMOCPanel() {
        initComponents();
        
        addRadioButtonsToButtonGroup();
        
        utilOps = new UtilityOperations();
        
        //vertically align components on the output window
        outputPanelOnScrollPane.setLayout(new BoxLayout(outputPanelOnScrollPane, BoxLayout.Y_AXIS));
        
        //Add padding to the output panel
        utilOps.addPadding(outputPanelOnScrollPane, 15, 15, 15, 15);
        
        //Listen for when the Panel state changes
        this.addAncestorListener(new AncestorListener(){
            @Override
            public void ancestorAdded(AncestorEvent event) {
                getRootPane().setDefaultButton(btnReInitialize);
                //Initialize card reader device
                initializeCardReaderDeviceWithNigerianEIDCardAsync();

                ancestorEvent = event;
            }

            @Override
            public void ancestorRemoved(AncestorEvent event) {
                
            }

            @Override
            public void ancestorMoved(AncestorEvent event) {
                
            }
            
        });
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        rBtnLeftThumb = new javax.swing.JRadioButton();
        rBtnRightThumb = new javax.swing.JRadioButton();
        rBtnLeftIndex = new javax.swing.JRadioButton();
        rBtnRightIndex = new javax.swing.JRadioButton();
        rBtnRightMiddle = new javax.swing.JRadioButton();
        rBtnLeftMiddle = new javax.swing.JRadioButton();
        rBtnLeftRing = new javax.swing.JRadioButton();
        rBtnRightRing = new javax.swing.JRadioButton();
        rBtnRightLittle = new javax.swing.JRadioButton();
        rBtnLeftLittle = new javax.swing.JRadioButton();
        btnReInitialize = new javax.swing.JButton();
        btnResetUserEPKIPinWithMOC = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputPanelOnScrollPane = new javax.swing.JPanel();
        btnClearOutput = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Reset User ePKI With MOC", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 18))); // NOI18N

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choose Finger", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        rBtnLeftThumb.setBackground(new java.awt.Color(255, 255, 255));
        rBtnLeftThumb.setText("Left Thumb");

        rBtnRightThumb.setBackground(new java.awt.Color(255, 255, 255));
        rBtnRightThumb.setText("Right Thumb");

        rBtnLeftIndex.setBackground(new java.awt.Color(255, 255, 255));
        rBtnLeftIndex.setText("Left Index");

        rBtnRightIndex.setBackground(new java.awt.Color(255, 255, 255));
        rBtnRightIndex.setText("Right Index");
        rBtnRightIndex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnRightIndexActionPerformed(evt);
            }
        });

        rBtnRightMiddle.setBackground(new java.awt.Color(255, 255, 255));
        rBtnRightMiddle.setText("Rigth Middle");

        rBtnLeftMiddle.setBackground(new java.awt.Color(255, 255, 255));
        rBtnLeftMiddle.setText("Left Middle");

        rBtnLeftRing.setBackground(new java.awt.Color(255, 255, 255));
        rBtnLeftRing.setText("Left Ring");

        rBtnRightRing.setBackground(new java.awt.Color(255, 255, 255));
        rBtnRightRing.setText("Right Ring");

        rBtnRightLittle.setBackground(new java.awt.Color(255, 255, 255));
        rBtnRightLittle.setText("Right Little");

        rBtnLeftLittle.setBackground(new java.awt.Color(255, 255, 255));
        rBtnLeftLittle.setText("Left Little");
        rBtnLeftLittle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnLeftLittleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(rBtnLeftThumb, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                        .addGap(8, 8, 8))
                    .addComponent(rBtnRightThumb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(rBtnLeftIndex, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                        .addGap(10, 10, 10))
                    .addComponent(rBtnRightIndex, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(47, 47, 47)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rBtnRightMiddle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(rBtnLeftMiddle, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                        .addGap(10, 10, 10)))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(rBtnLeftRing, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                        .addGap(10, 10, 10))
                    .addComponent(rBtnRightRing, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rBtnRightLittle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(rBtnLeftLittle, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                        .addGap(8, 8, 8)))
                .addGap(16, 16, 16))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rBtnLeftIndex, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rBtnLeftThumb, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rBtnRightThumb, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                            .addComponent(rBtnRightIndex, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(rBtnLeftMiddle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(24, 24, 24)
                        .addComponent(rBtnRightMiddle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(rBtnLeftRing, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(24, 24, 24)
                        .addComponent(rBtnRightRing, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(rBtnLeftLittle, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(rBtnRightLittle, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        btnReInitialize.setText("Re-Initialize");

        btnResetUserEPKIPinWithMOC.setText("Reset User ePKI Pin With MOC");
        btnResetUserEPKIPinWithMOC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetUserEPKIPinWithMOCActionPerformed(evt);
            }
        });

        outputPanelOnScrollPane.setBackground(new java.awt.Color(255, 255, 255));
        outputPanelOnScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Output Window"));

        javax.swing.GroupLayout outputPanelOnScrollPaneLayout = new javax.swing.GroupLayout(outputPanelOnScrollPane);
        outputPanelOnScrollPane.setLayout(outputPanelOnScrollPaneLayout);
        outputPanelOnScrollPaneLayout.setHorizontalGroup(
            outputPanelOnScrollPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        outputPanelOnScrollPaneLayout.setVerticalGroup(
            outputPanelOnScrollPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 257, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(outputPanelOnScrollPane);

        btnClearOutput.setText("Clear Output");
        btnClearOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearOutputActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnReInitialize, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnClearOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnResetUserEPKIPinWithMOC, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnReInitialize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnResetUserEPKIPinWithMOC, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(btnClearOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void rBtnRightIndexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnRightIndexActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rBtnRightIndexActionPerformed

    private void rBtnLeftLittleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnLeftLittleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rBtnLeftLittleActionPerformed

    private void btnClearOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearOutputActionPerformed
        
        outputPanelOnScrollPane.removeAll();
        outputPanelOnScrollPane.revalidate();
        outputPanelOnScrollPane.repaint();
        
    }//GEN-LAST:event_btnClearOutputActionPerformed

    private void btnResetUserEPKIPinWithMOCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetUserEPKIPinWithMOCActionPerformed
        
        resetUserEPKIPinWithMOCAsync(evt);
        
    }//GEN-LAST:event_btnResetUserEPKIPinWithMOCActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClearOutput;
    private javax.swing.JButton btnReInitialize;
    private javax.swing.JButton btnResetUserEPKIPinWithMOC;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel outputPanelOnScrollPane;
    private javax.swing.JRadioButton rBtnLeftIndex;
    private javax.swing.JRadioButton rBtnLeftLittle;
    private javax.swing.JRadioButton rBtnLeftMiddle;
    private javax.swing.JRadioButton rBtnLeftRing;
    private javax.swing.JRadioButton rBtnLeftThumb;
    private javax.swing.JRadioButton rBtnRightIndex;
    private javax.swing.JRadioButton rBtnRightLittle;
    private javax.swing.JRadioButton rBtnRightMiddle;
    private javax.swing.JRadioButton rBtnRightRing;
    private javax.swing.JRadioButton rBtnRightThumb;
    // End of variables declaration//GEN-END:variables

    private void populateOutputWindow(String output, int outputType) {

        SwingWorker<Void, Void> mySwingWorker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                Color color = null;

                switch (outputType) {
                    case 0:
                        color = Color.decode("0xFF0000");
                        break;
                    case 1:
                        color = Color.decode("0x006633");
                        break;
                    case 2:
                        color = Color.decode("0xE26633");
                        break;
                }

//                JLabel outputLabel = new JLabel(output);
//                outputLabel.setForeground(color);
//                outputLabel.setFont(new Font("", Font.PLAIN, 16));
                JTextArea outputTextArea = new JTextArea(2, 20);
                outputTextArea.setText("# " + output);
                outputTextArea.setWrapStyleWord(true);
                outputTextArea.setLineWrap(true);
                outputTextArea.setOpaque(false);
                outputTextArea.setEditable(false);
                outputTextArea.setFocusable(false);
                outputTextArea.setBackground(UIManager.getColor("Label.background"));
                outputTextArea.setFont(new Font("Serif", Font.PLAIN, 16));
                outputTextArea.setForeground(color);
                outputTextArea.setBorder(UIManager.getBorder("Label.border"));

                outputPanelOnScrollPane.add(outputTextArea);
                //outputPanelOnScrollPane.add(Box.createVerticalStrut(0));
                //outputPanelOnScrollPane.add(Box.createRigidArea(new Dimension(0,0)));
                outputPanelOnScrollPane.validate();
                return null;
            }
        };
        mySwingWorker.execute();
    }

    private void initializeCardReaderDeviceWithNigerianEIDCard(final int choice) {
        try {
            this.cardTerminal = new CardOperations().chooseTerminal(choice);

            if (this.cardTerminal != null) {
                this.card = this.cardTerminal.connect("*");

                if (this.card != null) {
                    this.ngEIDProfile = new NGeIDProfile(this.card);
                    this.card.beginExclusive();
                    if (!this.ngEIDProfile.isInstance()) {
                        populateOutputWindow("Card reader " + this.cardTerminal.getName() + " does not contain a Nigerian eID Card.", 0);
                    } else {
                        populateOutputWindow("Card reader " + this.cardTerminal.getName() + " contains a valid Nigerian eID Card.", 1);

                        //Change ePKI User Pin
                        //resetUserEPKIPinWithMOCAsync(ancestorEvent);

                    }
                    this.card.endExclusive();
                    this.ngEIDProfile.fallback();
                } else {
                    populateOutputWindow("Card reader " + this.cardTerminal.getName() + " does not contain any Card.", 2);
                }

            } else {
                populateOutputWindow("No Card Reader Device Found. Please try again.", 0);
            }
        } catch (Exception ex) {
            populateOutputWindow("An error occurred while initializing Card Reader Device >>>> " + ex.getMessage(), 0);
        }
    }

    private void initializeCardReaderDeviceWithNigerianEIDCardAsync() {
        SwingWorker<Void, Void> mySwingWorker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                initializeCardReaderDeviceWithNigerianEIDCard(0);
                return null;
            }
        };
        mySwingWorker.execute();
    }

    private void resetUserEPKIPinWithMOCAsync(ActionEvent actionEvent) {
        SwingWorker<Void, Void> mySwingWorker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                resetUserEPKIPinWithMOC();
                return null;
            }
        };

        Window win = SwingUtilities.getWindowAncestor((AbstractButton) actionEvent.getSource());
        final JDialog dialog = new JDialog(win, "Dialog", Dialog.ModalityType.APPLICATION_MODAL);

        mySwingWorker.addPropertyChangeListener(new PropertyChangeListener() {

            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().equals("state")) {
                    if (evt.getNewValue() == SwingWorker.StateValue.DONE) {
                        dialog.dispose();
                    }
                }
            }
        });
        mySwingWorker.execute();

        JProgressBar progressBar = new JProgressBar();
        progressBar.setIndeterminate(true);
        JPanel panel = new JPanel(new BorderLayout());
        utilOps.addPadding(panel, 15, 15, 15, 15);
        panel.add(progressBar, BorderLayout.CENTER);
        JLabel messageLabel = new JLabel("Resetting ePKI User Pin for Card, Please wait...");
        messageLabel.setFont(new Font("Serif", Font.ITALIC, 16));
        utilOps.addPadding(messageLabel, 0, 0, 10, 0);
        panel.add(messageLabel, BorderLayout.PAGE_START);
        //disable canceling the dialog
        dialog.setUndecorated(true);
        dialog.add(panel);
        dialog.pack();
        dialog.setLocationRelativeTo(win);
        dialog.setVisible(true);
    }
    
    private void resetUserEPKIPinWithMOC(){
        
        try{
            
            //btnActivateCard.setEnabled(false);
            this.fingerValue = -1;
            NGeIDCard nGeIDCard = null;

            try {
                nGeIDCard = new NGeIDCard(this.cardTerminal);
            } catch (ChannelException ex) {
                populateOutputWindow("There was a disconnection with the Card Reader Device. Re-Initializing >>>> " + ex.getMessage(), 0);
                this.initializeCardReaderDeviceWithNigerianEIDCardAsync();
                try {
                    nGeIDCard = new NGeIDCard(this.cardTerminal);
                } catch (ChannelException e) {
                    populateOutputWindow("Card Reader Re-Initializing failed >>>> " + e.getMessage(), 0);
                    this.resetSelectedFinger();
                    return;
                }
            }

            this.fingerValue = getSelectedFinger();
            if (this.fingerValue == -1) {
                populateOutputWindow("Please Select a Finger and Try again.", 2);
            } else {

                try {

                    populateOutputWindow("Change User PIN(i.e ePKI PIN) process initiated .....", 1);
                    populateOutputWindow("You will be required to pass MOC test in other to change user pin.....", 1);
                    
                    final String chipId = nGeIDCard.readChipId();
                    RetrievePINResponse rpResponse = null;
                    char[] puk = null;
                    char[] sopin = null;
                    
                    try{
                        
                        try {

                            new WebServiceCommunicator();
                            rpResponse = WebServiceCommunicator.rPins(chipId);
                            if (rpResponse.getReturnMessage().equalsIgnoreCase("error")) {
                                populateOutputWindow("Unable to obtain Pins for this card. Done", 0);
                                return;
                            }
                            puk = rpResponse.getPuk().toCharArray();
                            sopin = rpResponse.getSopin().toCharArray();
                            populateOutputWindow("Pins successfully retrieved >>>>> ", 1);

                        } catch (Exception ex) {
                            populateOutputWindow("Unable to Retrieve Pins for Card", 0);
                        }
                        
                        ReturnMessage returnMessage = new ReturnMessage();
                        
                        byte[] minutiae = null;
                            try {
                                minutiae = new CardOperations().verifyFinger2(new NGeIDCard(this.cardTerminal), this.fingerValue);
                                populateOutputWindow("Fingerprint verification successful", 1);
                            }
                            catch (Exception ex2) {
                                populateOutputWindow("Fingerprint verification failure.", 0);
                                //mn.insertLogs(MainPanel.this.em, "resetepkipinwithmoc", chipId, "failed", new InterfaceOperation().fingerNames[MainPanel.this.fv], Login.user.getUsername(), "Fingerprint verification failure", minutiae);
                                return;
                            }
                            returnMessage = new CardOperations().changeUserPINwithMoC2(new NGeIDCard(this.cardTerminal), this.fingerValue, chipId, minutiae);
                            if (returnMessage.isResult()) {
                                //mn.insertLogs(MainPanel.this.em, "resetepkipinwithmoc", chipId, "success", new InterfaceOperation().fingerNames[MainPanel.this.fv], Login.user.getUsername(), rt.getMessage(), null);
                                //System.out.println("______________________________________________________________________________________________________________________________________________________________________________________________________");
                                populateOutputWindow("ePKI Pin reset successful.", 1);
                            }
                            else {
                                populateOutputWindow("ePKI Pin reset failed, please try again.", 0);
                                //mn.insertLogs(MainPanel.this.em, "resetepkipinwithmoc", chipId, "failed", new InterfaceOperation().fingerNames[MainPanel.this.fv], Login.user.getUsername(), rt.getMessage(), null);
                            }
                            this.resetSelectedFinger();
                        
                    } catch (Exception ex) {
                        populateOutputWindow("Unable to retrieve Pins: " + ex.getMessage(), 0);
                    }

                } catch (Exception ex) {
                    this.resetSelectedFinger();
                    populateOutputWindow("An error occured: " + ex.getMessage(), 0);
                }

            }
            
        }finally{
            //btnActivateCard.setEnabled(true);
        }
        
    }

    private void addRadioButtonsToButtonGroup() {
        btnGrp = new ButtonGroup();
        btnGrp.add(rBtnLeftRing);
        btnGrp.add(rBtnRightRing);
        btnGrp.add(rBtnLeftThumb);
        btnGrp.add(rBtnRightThumb);
        btnGrp.add(rBtnLeftLittle);
        btnGrp.add(rBtnRightLittle);
        btnGrp.add(rBtnLeftMiddle);
        btnGrp.add(rBtnRightMiddle);
        btnGrp.add(rBtnLeftIndex);
        btnGrp.add(rBtnRightIndex);
    }
    
    private int getSelectedFinger() {
        if (this.rBtnLeftThumb.isSelected()) {
            return 0;
        }
        if (this.rBtnLeftIndex.isSelected()) {
            return 1;
        }
        if (this.rBtnLeftMiddle.isSelected()) {
            return 2;
        }
        if (this.rBtnLeftRing.isSelected()) {
            return 3;
        }
        if (this.rBtnLeftLittle.isSelected()) {
            return 4;
        }
        if (this.rBtnRightThumb.isSelected()) {
            return 5;
        }
        if (this.rBtnRightIndex.isSelected()) {
            return 6;
        }
        if (this.rBtnRightMiddle.isSelected()) {
            return 7;
        }
        if (this.rBtnRightRing.isSelected()) {
            return 8;
        }
        if (this.rBtnRightLittle.isSelected()) {
            return 9;
        }
        return -1;
    }
    
    private void resetSelectedFinger() {
        btnGrp.clearSelection();
    }
}
