/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import com.biosec.icams.CardDetails;
import com.biosec.icams.CardStatusChangeReason;
import com.biosec.icams.IcamsWS;
import com.biosec.icams.IcamsWS_Service;
import com.biosec.icams.IdTypes;
import com.biosec.icams.RequestCardStatusChangeResponse;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dialog.ModalityType;
import java.awt.Font;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.net.MalformedURLException;
import java.net.URL;
import javax.swing.AbstractButton;
import javax.swing.BorderFactory;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;
import javax.swing.text.PlainDocument;
import utilities.IntegerFilter;
import utilities.UtilityOperations;

/**
 *
 * @author INIONGUN ISAAC I
 */
public class CardOperationsPanel extends javax.swing.JPanel {

    private final IcamsWS_Service iCamsWS_Service;
    private final IcamsWS iCamsWS;
    private RequestCardStatusChangeResponse requestCardStatusChangeResponse;
    
    private final String USERNAME = "admin1";
    private final String PASSWORD = "weperm4now";
    private final String WSDL_URL_LOCATION_STR = "http://192.168.43.83:8180/iCams-ejb/IcamsWS/IcamsWS?wsdl";
    private URL WSDL_URL_LOCATION;
    
    private CardDetails cardDetails;
    private IdTypes idTypes;
    
    UtilityOperations utilOps;
    
    public CardOperationsPanel() {
        initComponents();
        
        utilOps = new UtilityOperations();
        
        //lbCardDisplayMessage.setVisible(false);
        cardDetailsPanel.setVisible(false);
        
        //add Padding to input elements
        addPaddingToInputElements();
        
        //Listen for panel State changes
        this.addAncestorListener(new AncestorListener(){
            @Override
            public void ancestorAdded(AncestorEvent event) {
                getRootPane().setDefaultButton(btnFindCard);
            }

            @Override
            public void ancestorRemoved(AncestorEvent event) {
                
            }

            @Override
            public void ancestorMoved(AncestorEvent event) {
                
            }
            
        });
        
        try{
            
            WSDL_URL_LOCATION = utilOps.getURL(WSDL_URL_LOCATION_STR);
            
        }catch(MalformedURLException ex){
            utilOps.displayMessage("Invalid WSDL URL: " + ex.getMessage(), "Error Message", JOptionPane.ERROR_MESSAGE);
        }
        
        iCamsWS_Service = new IcamsWS_Service(WSDL_URL_LOCATION);
        iCamsWS = iCamsWS_Service.getIcamsWSPort();
        cardDetails = null;
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbCardIdType = new javax.swing.JLabel();
        cBoxCardIDType = new javax.swing.JComboBox<>();
        btnFindCard = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        cardDetailsPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        chkBoxChipStatus = new javax.swing.JCheckBox();
        txtNIN = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtValidityTo = new javax.swing.JTextField();
        txtDocumentID = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtValidityFrom = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        cBoxCardOperationType = new javax.swing.JComboBox<>();
        btnSendRequest = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        cBoxChangeReason = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        txtCardId = new javax.swing.JTextField();
        lbCardIdentificationType = new javax.swing.JLabel();
        txtCardID = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Card Operations", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 18))); // NOI18N

        lbCardIdType.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbCardIdType.setText("Card Identification Type:");

        cBoxCardIDType.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cBoxCardIDType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NIN", "Document No.", "Card ID" }));
        cBoxCardIDType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cBoxCardIDTypeItemStateChanged(evt);
            }
        });

        btnFindCard.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnFindCard.setText("Find Card");
        btnFindCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindCardActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Confirm Card Details & Submit", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        cardDetailsPanel.setBackground(new java.awt.Color(255, 255, 255));
        cardDetailsPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("Validity Period:");

        chkBoxChipStatus.setBackground(new java.awt.Color(255, 255, 255));
        chkBoxChipStatus.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        chkBoxChipStatus.setText("Active/Inactive");
        chkBoxChipStatus.setEnabled(false);

        txtNIN.setEditable(false);
        txtNIN.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Document ID:");

        txtValidityTo.setEditable(false);
        txtValidityTo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        txtDocumentID.setEditable(false);
        txtDocumentID.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel10.setText("To:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("Chip Status:");

        txtValidityFrom.setEditable(false);
        txtValidityFrom.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("NIN:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setText("From:");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Operation Type:");

        cBoxCardOperationType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Block Card", "Suspend Card", "Reinstate Card" }));
        cBoxCardOperationType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cBoxCardOperationTypeItemStateChanged(evt);
            }
        });

        btnSendRequest.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnSendRequest.setText("Block Card");
        btnSendRequest.setEnabled(false);
        btnSendRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendRequestActionPerformed(evt);
            }
        });

        btnReset.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Change Reason:");

        cBoxChangeReason.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Stolen", "Lost", "Expired", "Post Issuance" }));
        cBoxChangeReason.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cBoxChangeReasonItemStateChanged(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Card ID:");

        txtCardId.setEditable(false);
        txtCardId.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        javax.swing.GroupLayout cardDetailsPanelLayout = new javax.swing.GroupLayout(cardDetailsPanel);
        cardDetailsPanel.setLayout(cardDetailsPanelLayout);
        cardDetailsPanelLayout.setHorizontalGroup(
            cardDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cardDetailsPanelLayout.createSequentialGroup()
                .addGroup(cardDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cardDetailsPanelLayout.createSequentialGroup()
                        .addGroup(cardDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(cardDetailsPanelLayout.createSequentialGroup()
                                .addGap(91, 91, 91)
                                .addComponent(jLabel4))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cardDetailsPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel7)))
                        .addGap(18, 18, 18)
                        .addGroup(cardDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNIN, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(cardDetailsPanelLayout.createSequentialGroup()
                                .addGroup(cardDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(txtValidityFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26)
                                .addGroup(cardDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(txtValidityTo, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(cardDetailsPanelLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(cardDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel8)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addComponent(chkBoxChipStatus)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cardDetailsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(cardDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cardDetailsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(txtCardId, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cardDetailsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(txtDocumentID, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cardDetailsPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(cardDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cardDetailsPanelLayout.createSequentialGroup()
                        .addComponent(btnSendRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(cardDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(cBoxCardOperationType, javax.swing.GroupLayout.Alignment.TRAILING, 0, 295, Short.MAX_VALUE)
                        .addComponent(cBoxChangeReason, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        cardDetailsPanelLayout.setVerticalGroup(
            cardDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cardDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cardDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtNIN, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(cardDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtCardId, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(cardDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtDocumentID, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(cardDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addGroup(cardDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(cardDetailsPanelLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(cardDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtValidityFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)))
                    .addGroup(cardDetailsPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtValidityTo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(cardDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(chkBoxChipStatus))
                .addGap(18, 18, 18)
                .addGroup(cardDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cBoxCardOperationType, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(cardDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cBoxChangeReason, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(cardDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSendRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(105, 105, 105)
                .addComponent(cardDetailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(147, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cardDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        lbCardIdentificationType.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbCardIdentificationType.setText("NIN:");

        txtCardID.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbCardIdType)
                    .addComponent(cBoxCardIDType, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbCardIdentificationType)
                        .addGap(0, 218, Short.MAX_VALUE))
                    .addComponent(txtCardID))
                .addGap(18, 18, 18)
                .addComponent(btnFindCard, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbCardIdType)
                    .addComponent(lbCardIdentificationType))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnFindCard, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(cBoxCardIDType)
                    .addComponent(txtCardID))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnFindCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindCardActionPerformed
        
        String cardID = txtCardID.getText();

        if (cardID.isEmpty())
            displayMessage("Card ID cannot be empty!", "Error Message", JOptionPane.ERROR_MESSAGE);
        else {
            switch (cBoxCardIDType.getSelectedIndex()) {
                case 0:
                    if (cardID.length() != 11) {
                        displayMessage("NIN must be exactly 11 characters!", "Error Message", JOptionPane.ERROR_MESSAGE);
                    } else {

                        getCardDetailsAsync(evt, IdTypes.NIN, cardID);
                        idTypes = IdTypes.NIN;

                        if (cardDetails != null && !cardDetails.getCardId().equalsIgnoreCase("")) {

                            populateCardDetailsPanel(cardDetails);

                        } else {
                            displayMessage("Card with " + cBoxCardIDType.getSelectedItem().toString() + ": " + cardID + " not found!", "Error Message", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                    break;
                case 1:
                    if (cardID.length() != 10) {
                        displayMessage("Document No. must be exactly 10 characters!", "Error Message", JOptionPane.ERROR_MESSAGE);
                    } else {

                        getCardDetailsAsync(evt, IdTypes.DOCUMENT_NO, cardID);
                        idTypes = IdTypes.DOCUMENT_NO;

                        if (cardDetails != null && !cardDetails.getCardId().equalsIgnoreCase("")) {

                            populateCardDetailsPanel(cardDetails);

                        } else {
                            displayMessage("Card with " + cBoxCardIDType.getSelectedItem().toString() + ": " + cardID + " not found!", "Error Message", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                    break;
                case 2:
                    if (cardID.length() != 16) {
                        displayMessage("Card ID must be exactly 16 characters!", "Error Message", JOptionPane.ERROR_MESSAGE);
                    } else {

                        getCardDetailsAsync(evt, IdTypes.CHIP_ID, cardID);
                        idTypes = IdTypes.CHIP_ID;

                        if (cardDetails != null && !cardDetails.getCardId().equalsIgnoreCase("")) {

                            populateCardDetailsPanel(cardDetails);

                        } else {
                            displayMessage("Card with " + cBoxCardIDType.getSelectedItem().toString() + ": " + cardID + " not found!", "Error Message", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                    break;
            }
        }
        
    }//GEN-LAST:event_btnFindCardActionPerformed

    private void cBoxCardIDTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cBoxCardIDTypeItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED){
            String selectedItem = evt.getItem().toString();
            lbCardIdentificationType.setText(selectedItem + ":");
        }
    }//GEN-LAST:event_cBoxCardIDTypeItemStateChanged

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        
        txtNIN.setText("");
        txtCardId.setText("");
        txtDocumentID.setText("");
        txtValidityFrom.setText("");
        txtValidityTo.setText("");
        chkBoxChipStatus.setSelected(false);
        btnSendRequest.setEnabled(false);
        
        cBoxCardIDType.setEnabled(true);
        txtCardID.setEnabled(true);
        btnFindCard.setEnabled(true);
        
    }//GEN-LAST:event_btnResetActionPerformed

    private void cBoxCardOperationTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cBoxCardOperationTypeItemStateChanged
        btnSendRequest.setText(cBoxCardOperationType.getSelectedItem().toString());
    }//GEN-LAST:event_cBoxCardOperationTypeItemStateChanged

    private void cBoxChangeReasonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cBoxChangeReasonItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cBoxChangeReasonItemStateChanged

    private void btnSendRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendRequestActionPerformed
        
        sendRequestAsync(evt, txtCardId.getText(), cBoxCardOperationType.getSelectedIndex(), cBoxCardOperationType.getSelectedItem().toString());
        
        if(!requestCardStatusChangeResponse.getPKIStatus().equalsIgnoreCase("")){
            
            utilOps.displayMessage(cBoxCardOperationType.getSelectedItem().toString() + " Request Successful.", "Success Message", JOptionPane.INFORMATION_MESSAGE);
            resetUIPostRequest();
            
        }else{
            utilOps.displayMessage(cBoxCardOperationType.getSelectedItem().toString() + " Request Failed, please try again.", "Error Message", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_btnSendRequestActionPerformed

    private void displayMessage(String message, String title, int messageType){
        int msgType;
        switch(messageType){
            case JOptionPane.ERROR_MESSAGE:
                msgType = JOptionPane.ERROR_MESSAGE;
                break;
            case JOptionPane.INFORMATION_MESSAGE:
                msgType = JOptionPane.INFORMATION_MESSAGE;
                break;
            case JOptionPane.WARNING_MESSAGE:
                msgType = JOptionPane.WARNING_MESSAGE;
                break;
        }
        
        JOptionPane.showMessageDialog(null, message, title, messageType);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFindCard;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSendRequest;
    private javax.swing.JComboBox<String> cBoxCardIDType;
    private javax.swing.JComboBox<String> cBoxCardOperationType;
    private javax.swing.JComboBox<String> cBoxChangeReason;
    private javax.swing.JPanel cardDetailsPanel;
    private javax.swing.JCheckBox chkBoxChipStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lbCardIdType;
    private javax.swing.JLabel lbCardIdentificationType;
    private javax.swing.JTextField txtCardID;
    private javax.swing.JTextField txtCardId;
    private javax.swing.JTextField txtDocumentID;
    private javax.swing.JTextField txtNIN;
    private javax.swing.JTextField txtValidityFrom;
    private javax.swing.JTextField txtValidityTo;
    // End of variables declaration//GEN-END:variables

    private void getCardDetailsAsync(ActionEvent evt, IdTypes cardIdType, String cardId) {
        SwingWorker<Void, Void> mySwingWorker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                getCardDetails(cardIdType, cardId);
                return null;
            }
        };

        Window win = SwingUtilities.getWindowAncestor((AbstractButton) evt.getSource());
        final JDialog dialog = new JDialog(win, "Dialog", ModalityType.APPLICATION_MODAL);

        mySwingWorker.addPropertyChangeListener(new PropertyChangeListener() {

            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().equals("state")) {
                    if (evt.getNewValue() == SwingWorker.StateValue.DONE) {
                        dialog.dispose();
                    }
                }
            }
        });
        mySwingWorker.execute();

        JProgressBar progressBar = new JProgressBar();
        progressBar.setIndeterminate(true);
        JPanel panel = new JPanel(new BorderLayout());
        utilOps.addPadding(panel, 15, 15, 15, 15);
        panel.add(progressBar, BorderLayout.CENTER);
        JLabel messageLabel = new JLabel("Finding Card, Please wait...");
        messageLabel.setFont(new Font("Serif", Font.ITALIC, 16));
        utilOps.addPadding(messageLabel, 0, 0, 10, 0);
        panel.add(messageLabel, BorderLayout.PAGE_START);
        //disable canceling the dialog
        dialog.setUndecorated(true);
        dialog.add(panel);
        dialog.pack();
        dialog.setLocationRelativeTo(win);
        dialog.setVisible(true);
    }

    private void getCardDetails(IdTypes cardIdType, String cardId) {
        try{
            cardDetails = iCamsWS.getCardDetails(USERNAME, PASSWORD, cardIdType, cardId);
        }catch(Exception ex){
            utilOps.displayMessage("Unable to get Card Details: " + ex.getMessage(), "Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private String rewriteDate(String dateStr){
        if(dateStr.substring(4, 6).equalsIgnoreCase("01"))
            return "Jan. " + dateStr.substring(0,4);
        else if(dateStr.substring(4, 6).equalsIgnoreCase("02"))
            return "Feb. " + dateStr.substring(0,4);
        else if(dateStr.substring(4, 6).equalsIgnoreCase("03"))
            return "Mar. " + dateStr.substring(0,4);
        else if(dateStr.substring(4, 6).equalsIgnoreCase("04"))
            return "Apr. " + dateStr.substring(0,4);
        else if(dateStr.substring(4, 6).equalsIgnoreCase("05"))
            return "May. " + dateStr.substring(0,4);
        else if(dateStr.substring(4, 6).equalsIgnoreCase("06"))
            return "Jun. " + dateStr.substring(0,4);
        else if(dateStr.substring(4, 6).equalsIgnoreCase("07"))
            return "Jul. " + dateStr.substring(0,4);
        else if(dateStr.substring(4, 6).equalsIgnoreCase("08"))
            return "Aug. " + dateStr.substring(0,4);
        else if(dateStr.substring(4, 6).equalsIgnoreCase("09"))
            return "Sep. " + dateStr.substring(0,4);
        else if(dateStr.substring(4, 6).equalsIgnoreCase("10"))
            return "Oct. " + dateStr.substring(0,4);
        else if(dateStr.substring(4, 6).equalsIgnoreCase("11"))
            return "Nov. " + dateStr.substring(0,4);
        else if(dateStr.substring(4, 6).equalsIgnoreCase("12"))
            return "Dec. " + dateStr.substring(0,4);
        return "";
    }
    
    private void addPaddingToInputElements(){
        addPadding(cBoxCardIDType);
        addPadding(txtCardID);
        addPadding(txtNIN);
        addPadding(txtDocumentID);
        addPadding(txtValidityFrom);
        addPadding(txtValidityTo);
        addPadding(cBoxCardOperationType);
        addPadding(cBoxChangeReason);
    }
    
    private void addPadding(JComponent component){
        component.setBorder(BorderFactory.createCompoundBorder(component.getBorder(), BorderFactory.createEmptyBorder(10,10,10,10)));
    }

    private void populateCardDetailsPanel(CardDetails cardDetails) {
        
        btnFindCard.setEnabled(false);
        txtCardID.setEnabled(false);
        cBoxCardIDType.setEnabled(false);
        
        btnSendRequest.setEnabled(true);
        cBoxCardOperationType.setEnabled(true);
        
        getRootPane().setDefaultButton(btnSendRequest);
        
        txtNIN.setText(cardDetails.getNin());
        txtCardId.setText(cardDetails.getCardId());
        txtDocumentID.setText(cardDetails.getDocumentNo());
        txtValidityFrom.setText(this.rewriteDate(cardDetails.getValidityFrom()));
        txtValidityTo.setText(this.rewriteDate(cardDetails.getValidityTo()));
        chkBoxChipStatus.setSelected(cardDetails.getChipStatus().equalsIgnoreCase(""));
        chkBoxChipStatus.setText(cardDetails.getChipStatus());

        cardDetailsPanel.setVisible(true);
        
    }

    private void sendRequestAsync(ActionEvent evt, String cardId, int requestType, String requestStr) {
        
        SwingWorker<Void, Void> mySwingWorker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                sendRequest(cardId, requestType);
                return null;
            }
        };

        Window win = SwingUtilities.getWindowAncestor((AbstractButton) evt.getSource());
        final JDialog dialog = new JDialog(win, "Dialog", ModalityType.APPLICATION_MODAL);

        mySwingWorker.addPropertyChangeListener(new PropertyChangeListener() {

            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().equals("state")) {
                    if (evt.getNewValue() == SwingWorker.StateValue.DONE) {
                        dialog.dispose();
                    }
                }
            }
        });
        mySwingWorker.execute();

        JProgressBar progressBar = new JProgressBar();
        progressBar.setIndeterminate(true);
        JPanel panel = new JPanel(new BorderLayout());
        utilOps.addPadding(panel, 15, 15, 15, 15);
        panel.add(progressBar, BorderLayout.CENTER);
        JLabel messageLabel = new JLabel(requestStr + ", Please wait...");
        messageLabel.setFont(new Font("Serif", Font.ITALIC, 16));
        utilOps.addPadding(messageLabel, 0, 0, 10, 0);
        panel.add(messageLabel, BorderLayout.PAGE_START);
        //disable canceling the dialog
        dialog.setUndecorated(true);
        dialog.add(panel);
        dialog.pack();
        dialog.setLocationRelativeTo(win);
        dialog.setVisible(true);
        
    }
    
    private void sendRequest(String cardId, int requestType){
        
        try {
            CardStatusChangeReason cardStatusChangeReason = null;

            switch (cBoxChangeReason.getSelectedIndex()) {
                case 0:
                    cardStatusChangeReason = CardStatusChangeReason.STOLEN;
                    break;
                case 1:
                    cardStatusChangeReason = CardStatusChangeReason.LOST;
                    break;
                case 2:
                    cardStatusChangeReason = CardStatusChangeReason.EXPIRED;
                    break;
                case 3:
                    cardStatusChangeReason = CardStatusChangeReason.POST_ISSUANCE;
                    break;
            }

            switch (requestType) {
                case 0:
                    requestCardStatusChangeResponse = iCamsWS.requestCardBlock(USERNAME, PASSWORD, idTypes, cardId, cardStatusChangeReason);
                    break;
                case 1:
                    requestCardStatusChangeResponse = iCamsWS.requestCardSuspend(USERNAME, PASSWORD, idTypes, cardId, cardStatusChangeReason);
                    break;
                case 2:
                    requestCardStatusChangeResponse = iCamsWS.requestCardReinstate(USERNAME, PASSWORD, idTypes, cardId);
                    break;
            }
        } catch (Exception ex) {
            utilOps.displayMessage("Unable to get Send Request for Card: " + ex.getMessage(), "Error Message", JOptionPane.ERROR_MESSAGE);
        }

    }

    private void resetUIPostRequest() {
        
        txtNIN.setText("");
        txtCardId.setText("");
        txtDocumentID.setText("");
        txtValidityFrom.setText("");
        txtValidityTo.setText("");
        chkBoxChipStatus.setSelected(false);
        btnSendRequest.setEnabled(false);
        
        cBoxCardIDType.setEnabled(true);
        cBoxCardIDType.setSelectedIndex(0);
        txtCardID.setEnabled(true);
        txtCardID.setText("");
        btnFindCard.setEnabled(true);
        
        cardDetailsPanel.setVisible(false);
    }
}
